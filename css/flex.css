/******************************* flex 컨테이너에 먹이는 속성들 */
.flex-wrap-container {
  /* flex 방향 */
  flex-direction: column;
  justify-content: center;
  align-items: center;

  /* wrap과 wrap 되었을 때의 간격 */
  flex-wrap: nowrap; /* 주어진 아이템들이 상위 wrapper의 길이를 넘어가게 됐을 때 flex-wrap: wrap을 안주면 상위 wrapper에 맞춰 찌그러짐. nowwrap 속성이 기본 값이기 때문*/
  align-content: center; /* flex-wrap: wrap;이 설정된 상태에서, 아이템들의 행이 2줄 이상 되었을 때의 수직축 방향 정렬을 결정하는 속성. default는 stretch. */

  /* flex-direction과 flex-wrap의 줄임 표시. 단순히 편해서 사용하는거임. */
  /* flex-flow: [flex방향] [wrap 여부] */
  flex-flow: row wrap;
}

.flex-wrap-container > .flex-wrap-container_item {
  width: 80%;
  height: 100px;

  /* 순서. 기본값은 0 */
  order: 1;

  align-self: center;
}

/******************************* flex 아이템에 먹이는 속성들 */
/* 가장 많이 쓰는 3개 */
/* flex-basis: 아이템의 기본 크기를 지정. flex-grow나 shrink로 늘어나거나 줄어들기 전의 기본 크기를 설정. 
flex-direction이 row라면 basis는 가로. column이면 세로를 의미. 
어디까지나 기본 크기이기 때문에 이 크기보다 큰 아이템들은 자신들의 크기를 유지한다. 
강제로 width, height를 주면 강제로 해당 크기를 유지하기 때문에 flex-basis와는 차이가 있음. */
/* 아이템이 기본 값을 넘어 넓어질 수 있는지를 설정함. 1만 줘도 화면 긑까지 꽉 채움. 아이템을 화면에 꽉 채우는데 유용함.
  1이며 ㄴ늘어나고 0이면 안늘어난다. 대개 wrap으로 넘쳐서 삐져나온 한 아이템의 크기가 화면 끝까지 늘어나게 할 것인지 고유한 크기를 유지하게 할 것인지를 결정하는데 사용.
  숫자를 이용해 아이템의 여백의 비율을 조정할 수도 있음. (아이템 크기의 비율이 아님에 주의하자)*/
.flex-basis-container > .flex-basis-container_item {
  flex-basis: 150px;
  height: 50px;
}

/* flex-grow: 아이템이 기본값을 넘어 넓어질 수 있는지를 설정. 
    1만 줘도 화면 끝까지 꽉 채움. 
    아이템을 화면에 꽉 채우는데 유용. 
    1이면 늘어나고 0이면 안늘어난다.
    대개 wrap으로 넘쳐서 삐져나온 한 아이템의 크기가 화면 끝까지 늘어나게 할 것인지
    고유한 크기를 유지하게 할 것인지를 결정하는데 사용.
    숫자를 이용해 아이템의 여백의 비율을 조정할 수도 있다.(아이템 크기의 비율이 아님에 주의)
    1이상의 값을 줌으로써 늘어나는 비율을 설정할 수도 있다.
     */
.flex-grow-container > .flex-grow-container_item {
  flex-basis: 150px;
  height: 50px;
}

.flex-grow-container > .flex-grow-container_item:nth-child(2) {
  flex-grow: 1;
}

/* flex-shrink: flex에서 아이템은 고정 값인 width값을 주어도, 화면이 줄어들면 width를 무시하고 줄어든다.
    브라우저 가로 길이를 줄이면 박스가 알아서 줄어드는 것을 확인할 수 있다.
    이는 flex-shrink의 기본값이 '1' 줄어듦이기 때문.
    크기를 유지하고 싶으면 0을 사용한다.
    기본값이 1이므로 2,3등 특정값을 주면 줄어드는 비율이 늘어난다.
    2로 설정하면 줄어드는 비율이 2배*/

.flex-shrink-container > .flex-shrink-container_item {
  flex-basis: 500px;
  height: 50px;
}

.flex-shrink-container > .flex-shrink-container_item:nth-child(2) {
  flex-shrink: 0; /* 화면 줄여도 크기 안줄어듦 */
}

/* flex: 위 3개 속성을 쉽게 작성할 수 있음
    flex: flex-grow flex-shrink flex-basis 순으로 작성. 
    이 세 속성은 서로 관련성이 있기 때문에 대개 flex라는 축약형으로 사용한다.
    주의할 점은 flex-basis를 생략하면 auto가 아니라 값이 0으로 설정되며 flex-shrink를 생략하면
    1(줄어듦)으로 설정된다는 것*/
.flex-container > .flex-container_item {
  height: 50px;
}

.flex-container_item {
  flex-basis: 100px;
}

.flex-container > .flex-container_item:nth-child(2) {
  flex: 1 1 30%; /* grow 1(늘어남), shrink 1(줄어듦), 기본 크기 30% */
  /* flex: 1 1 auto; */ /* grow 1(늘어남), shrink 1(줄어듦), auto(50px) */
}
/* 브라우저의 크기에 상관없이 세 아이템의 크기의 비율을 1:2:1로 유지하려면. 이렇게 하면 된다.
단, 내용물이 너무 많으면 깨진다. 내용물에 상관없이 비율을 유지하고 싶으면 width: 25%, 50% 25% 해주면 된다. */

/* align-self: align-items가 flex-container에 적어서 전체 아이템을 대상으로 하는 속성이라면
align-self는 각 flex-item에 개별적으로 영향력을 미치는 속성
당연히 align-items보다 우선적으로 적용된다.*/

/* order: 아이템들의 순서를 결정한다. 다만 HTML 구조를 바꾸는건 아니다.
기본적으로 flex 아이템들은 order가 0이다. order가 작은 순서대로 왼쪽부터 배치된다.
2번째 item에는 아무 값도 주지 않았으니 0이고, 맨 왼쪽에 배치된다. */

.alSelf-order-container {
  justify-content: space-around;
  align-items: center;
  height: 50vh;
  border: 1px solid black;
}

.alSelf-order-container_item {
  width: 100px;
  height: 100px;
  display: inline-block;
}
.alSelf-order-container_item:nth-child(1) {
  order: 2;
}
.alSelf-order-container_item:nth-child(2) {
  align-self: flex-end;
}
.alSelf-order-container_item:nth-child(3) {
  align-self: flex-start;
  order: 3;
}

.flex-wrapper {
  display: flex;
}

.flex_item {
  border: 1px solid black;
}

.flex_item:nth-child(even) {
  background: gray;
}
.flex_item:nth-child(odd) {
  background: red;
}
